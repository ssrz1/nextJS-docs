/*
  Detailed Overview of Routing and Navigation in Next.js:

  1. Code Splitting:
     - Automatically divides application code into smaller chunks.
     - Each route segment has its own bundle, reducing initial load time.
     - Server Components are utilized to load only the necessary code for the current route, enhancing performance.

  2. Prefetching:
     - Routes are preloaded in the background to speed up navigation.
     - <Link> component: Automatically prefetches routes when they appear in the viewport or on page load.
     - useRouter().prefetch(): Allows for manual prefetching of routes.
     - Prefetch behavior can be customized with the prefetch prop on the <Link> component:
       - `true`: Prefetches the full page data.
       - `false`: Disables prefetching.
       - `null` or unspecified: Prefetches up to the first loading.js boundary, cached for 30 seconds.

  3. Caching:
     - Utilizes an in-memory cache (Router Cache) to store prefetched and visited route segments.
     - Reduces server requests and data transfer by reusing cached data during navigation.
     - Enhances user experience by providing faster route transitions.

  4. Partial Rendering:
     - Only the route segments that change are re-rendered during navigation.
     - Shared segments (like layouts) are preserved, minimizing the data transfer and rendering time.
     - Example: Navigating between /dashboard/settings and /dashboard/analytics re-renders only the specific content pages, keeping the dashboard layout intact.

  5. Soft Navigation:
     - Implements "soft navigation" which avoids full page reloads.
     - Only changed route segments are updated, allowing React state to be preserved.
     - Provides a smoother and faster navigation experience.

  6. Back and Forward Navigation:
     - Maintains scroll position during back and forward navigation.
     - Reuses cached route segments for efficient navigation.

  7. Routing between pages/ and app/:
     - Handles transitions between traditional pages and new app routes seamlessly.
     - Uses a probabilistic client router filter to manage transitions, minimizing false positives.
     - Configuration options:
       - `experimental.clientRouterFilterAllowedRate`: Adjusts the likelihood of false positives.
       - `experimental.clientRouterFilter`: Can be set to false to disable automatic handling and manage routing manually.

  These features collectively improve the performance, efficiency, and user experience of applications built with Next.js by optimizing data usage and reducing load times.
*/

