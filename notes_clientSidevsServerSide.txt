/*
  Client Component vs Server Component in Next.js:

  - **Client Components**:
    - Executed on the client-side (in the user's browser).
    - Ideal for interactive elements that require immediate user feedback.
    - Access to browser-specific APIs like the DOM.
    - Use `use-client` to explicitly mark components that should only run on the client side.

  - **Server Components**:
    - Executed on the server-side during the rendering process.
    - Useful for components that fetch data or perform operations that don't require user interaction.
    - They do not have access to browser-specific APIs.
    - Use `use-server` to designate components that should be confined to server-side logic.

  - **Why Specify `use-client` or `use-server`?**:
    - Helps Next.js optimize rendering by determining where the component should be executed.
    - Prevents unnecessary downloads of server code to the client, reducing bundle size.
    - Ensures sensitive data or operations handled by server components do not get exposed to the client.

  - **Why Not Write Code in One File for Both?**:
    - Separation of concerns: Keeps client-specific and server-specific operations distinct.
    - Security: Prevents exposing server-side logic and data directly to the client.
    - Performance: Reduces the amount of code sent to the client, speeding up loading times.
    - Maintainability: Makes it easier to manage and update client-only or server-only parts without affecting the other.
*/
/*
  - **Client Side Only**:
    - Interactive UI elements such as buttons, sliders, and animations.
    - Components that use browser-specific APIs like `window`, `document`, or `localStorage`.
    - Real-time user interaction handling, such as input validation or dynamic content updates.
    - Client-specific hooks like `useState`, `useEffect`, which manage and respond to user interactions and component lifecycle.

  - **Server Side Only**:
    - Data fetching operations from databases or external APIs before rendering the page.
    - Secure operations like user authentication or data processing that should not be exposed to the client.
    - Server-side logging and monitoring operations that track application performance and usage.

  - **Why Hooks Are Not Included on Server Side**:
    - Hooks such as `useState` or `useEffect` are designed to work with the component lifecycle and state management which are inherently client-side concepts.
    - Server-side rendering does not maintain a persistent state or lifecycle between requests, making these hooks irrelevant and non-functional in a server context.
    - Using hooks on the server side could lead to memory leaks and performance issues, as each request would need to set up and tear down the hooks, unlike on the client side where the state persists across re-renders.
*/

/*
  - **State Persistence Across Re-renders in React**:
    - In React, state does persist across component re-renders.
    - When state is updated using setState or useState, React re-renders the component to reflect the new state values.
    - This persistence is crucial for dynamic and interactive user interfaces where the state changes in response to user actions or system events.
    - However, the component's state does not persist across unmounting and remounting. If a component is removed from the DOM and later added back, it will lose its previous state and start with the initial state.

  - **Comparison with Next.js**:
    - Next.js extends React and thus inherits the same state persistence behavior across re-renders.
    - However, Next.js offers additional features like Automatic Static Optimization and Incremental Static Regeneration that can enhance performance.
    - These features allow Next.js to serve static pages with dynamic data, which can be updated in the background, providing a faster user experience without sacrificing real-time data updates.
    - Next.js also supports API routes and server-side rendering, which can handle data fetching, authentication, and other server-side operations before rendering, reducing the need to manage such operations on the client side.
*/


/*
  - **Automatic Static Optimization**:
    - Think of it like a magic book:
      * The book only shows the pages you need to see, right when you need to see them.
      * In Next.js, when you visit a website, it quickly shows you a page that doesn't need to wait for any new information.
      * It's super fast because it's already ready, just like a page in a book waiting to be read.

  - **Incremental Static Regeneration**:
    - Imagine a magic painting that can change itself:
      * Even after the website's page has been shown to you, Next.js can update that page in the background if something new needs to be added.
      * The next time you or anyone else looks at the page, it might have new things like an updated score in a game or a new comment on a blog post.
      * It's still fast, but it's also fresh and up-to-date!
*/

